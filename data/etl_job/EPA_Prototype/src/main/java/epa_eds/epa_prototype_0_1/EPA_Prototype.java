// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package epa_eds.epa_prototype_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: EPA_Prototype Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class EPA_Prototype implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (src_dir != null) {

				this.setProperty("src_dir", src_dir.toString());

			}

			if (wrk_dir != null) {

				this.setProperty("wrk_dir", wrk_dir.toString());

			}

			if (recv_dir != null) {

				this.setProperty("recv_dir", recv_dir.toString());

			}

		}

		public String src_dir;

		public String getSrc_dir() {
			return this.src_dir;
		}

		public String wrk_dir;

		public String getWrk_dir() {
			return this.wrk_dir;
		}

		public String recv_dir;

		public String getRecv_dir() {
			return this.recv_dir;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "EPA_Prototype";
	private final String projectName = "EPA_EDS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					EPA_Prototype.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(EPA_Prototype.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWriteJSONField_1_Out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tWriteJSONField_1_In_error(exception, errorComponent, globalMap);

	}

	public void tWriteJSONField_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWriteJSONField_1_In_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity_2011;

		public BigDecimal getGhg_quantity_2011() {
			return this.ghg_quantity_2011;
		}

		public BigDecimal ghg_quantity_2012;

		public BigDecimal getGhg_quantity_2012() {
			return this.ghg_quantity_2012;
		}

		public BigDecimal ghg_quantity_2013;

		public BigDecimal getGhg_quantity_2013() {
			return this.ghg_quantity_2013;
		}

		public BigDecimal ghg_quantity_2014;

		public BigDecimal getGhg_quantity_2014() {
			return this.ghg_quantity_2014;
		}

		public BigDecimal ghg_goal_2022;

		public BigDecimal getGhg_goal_2022() {
			return this.ghg_goal_2022;
		}

		public BigDecimal ghg_goal_2023;

		public BigDecimal getGhg_goal_2023() {
			return this.ghg_goal_2023;
		}

		public BigDecimal ghg_goal_2024;

		public BigDecimal getGhg_goal_2024() {
			return this.ghg_goal_2024;
		}

		public BigDecimal ghg_goal_2025;

		public BigDecimal getGhg_goal_2025() {
			return this.ghg_goal_2025;
		}

		public BigDecimal ghg_goal_2026;

		public BigDecimal getGhg_goal_2026() {
			return this.ghg_goal_2026;
		}

		public BigDecimal ghg_goal_2027;

		public BigDecimal getGhg_goal_2027() {
			return this.ghg_goal_2027;
		}

		public BigDecimal ghg_goal_2028;

		public BigDecimal getGhg_goal_2028() {
			return this.ghg_goal_2028;
		}

		public BigDecimal ghg_goal_2029;

		public BigDecimal getGhg_goal_2029() {
			return this.ghg_goal_2029;
		}

		public BigDecimal ghg_goal_2030;

		public BigDecimal getGhg_goal_2030() {
			return this.ghg_goal_2030;
		}

		public String state_fullname;

		public String getState_fullname() {
			return this.state_fullname;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

					this.ghg_quantity_2011 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2012 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2013 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2014 = (BigDecimal) dis.readObject();

					this.ghg_goal_2022 = (BigDecimal) dis.readObject();

					this.ghg_goal_2023 = (BigDecimal) dis.readObject();

					this.ghg_goal_2024 = (BigDecimal) dis.readObject();

					this.ghg_goal_2025 = (BigDecimal) dis.readObject();

					this.ghg_goal_2026 = (BigDecimal) dis.readObject();

					this.ghg_goal_2027 = (BigDecimal) dis.readObject();

					this.ghg_goal_2028 = (BigDecimal) dis.readObject();

					this.ghg_goal_2029 = (BigDecimal) dis.readObject();

					this.ghg_goal_2030 = (BigDecimal) dis.readObject();

					this.state_fullname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2011);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2012);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2013);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2014);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2022);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2023);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2024);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2025);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2026);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2027);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2028);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2029);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2030);

				// String

				writeString(this.state_fullname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",ghg_quantity_2011=" + String.valueOf(ghg_quantity_2011));
			sb.append(",ghg_quantity_2012=" + String.valueOf(ghg_quantity_2012));
			sb.append(",ghg_quantity_2013=" + String.valueOf(ghg_quantity_2013));
			sb.append(",ghg_quantity_2014=" + String.valueOf(ghg_quantity_2014));
			sb.append(",ghg_goal_2022=" + String.valueOf(ghg_goal_2022));
			sb.append(",ghg_goal_2023=" + String.valueOf(ghg_goal_2023));
			sb.append(",ghg_goal_2024=" + String.valueOf(ghg_goal_2024));
			sb.append(",ghg_goal_2025=" + String.valueOf(ghg_goal_2025));
			sb.append(",ghg_goal_2026=" + String.valueOf(ghg_goal_2026));
			sb.append(",ghg_goal_2027=" + String.valueOf(ghg_goal_2027));
			sb.append(",ghg_goal_2028=" + String.valueOf(ghg_goal_2028));
			sb.append(",ghg_goal_2029=" + String.valueOf(ghg_goal_2029));
			sb.append(",ghg_goal_2030=" + String.valueOf(ghg_goal_2030));
			sb.append(",state_fullname=" + state_fullname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity_2011;

		public BigDecimal getGhg_quantity_2011() {
			return this.ghg_quantity_2011;
		}

		public BigDecimal ghg_quantity_2012;

		public BigDecimal getGhg_quantity_2012() {
			return this.ghg_quantity_2012;
		}

		public BigDecimal ghg_quantity_2013;

		public BigDecimal getGhg_quantity_2013() {
			return this.ghg_quantity_2013;
		}

		public BigDecimal ghg_quantity_2014;

		public BigDecimal getGhg_quantity_2014() {
			return this.ghg_quantity_2014;
		}

		public BigDecimal ghg_goal_2022;

		public BigDecimal getGhg_goal_2022() {
			return this.ghg_goal_2022;
		}

		public BigDecimal ghg_goal_2023;

		public BigDecimal getGhg_goal_2023() {
			return this.ghg_goal_2023;
		}

		public BigDecimal ghg_goal_2024;

		public BigDecimal getGhg_goal_2024() {
			return this.ghg_goal_2024;
		}

		public BigDecimal ghg_goal_2025;

		public BigDecimal getGhg_goal_2025() {
			return this.ghg_goal_2025;
		}

		public BigDecimal ghg_goal_2026;

		public BigDecimal getGhg_goal_2026() {
			return this.ghg_goal_2026;
		}

		public BigDecimal ghg_goal_2027;

		public BigDecimal getGhg_goal_2027() {
			return this.ghg_goal_2027;
		}

		public BigDecimal ghg_goal_2028;

		public BigDecimal getGhg_goal_2028() {
			return this.ghg_goal_2028;
		}

		public BigDecimal ghg_goal_2029;

		public BigDecimal getGhg_goal_2029() {
			return this.ghg_goal_2029;
		}

		public BigDecimal ghg_goal_2030;

		public BigDecimal getGhg_goal_2030() {
			return this.ghg_goal_2030;
		}

		public String state_fullname;

		public String getState_fullname() {
			return this.state_fullname;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

					this.ghg_quantity_2011 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2012 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2013 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2014 = (BigDecimal) dis.readObject();

					this.ghg_goal_2022 = (BigDecimal) dis.readObject();

					this.ghg_goal_2023 = (BigDecimal) dis.readObject();

					this.ghg_goal_2024 = (BigDecimal) dis.readObject();

					this.ghg_goal_2025 = (BigDecimal) dis.readObject();

					this.ghg_goal_2026 = (BigDecimal) dis.readObject();

					this.ghg_goal_2027 = (BigDecimal) dis.readObject();

					this.ghg_goal_2028 = (BigDecimal) dis.readObject();

					this.ghg_goal_2029 = (BigDecimal) dis.readObject();

					this.ghg_goal_2030 = (BigDecimal) dis.readObject();

					this.state_fullname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2011);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2012);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2013);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2014);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2022);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2023);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2024);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2025);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2026);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2027);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2028);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2029);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2030);

				// String

				writeString(this.state_fullname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",ghg_quantity_2011=" + String.valueOf(ghg_quantity_2011));
			sb.append(",ghg_quantity_2012=" + String.valueOf(ghg_quantity_2012));
			sb.append(",ghg_quantity_2013=" + String.valueOf(ghg_quantity_2013));
			sb.append(",ghg_quantity_2014=" + String.valueOf(ghg_quantity_2014));
			sb.append(",ghg_goal_2022=" + String.valueOf(ghg_goal_2022));
			sb.append(",ghg_goal_2023=" + String.valueOf(ghg_goal_2023));
			sb.append(",ghg_goal_2024=" + String.valueOf(ghg_goal_2024));
			sb.append(",ghg_goal_2025=" + String.valueOf(ghg_goal_2025));
			sb.append(",ghg_goal_2026=" + String.valueOf(ghg_goal_2026));
			sb.append(",ghg_goal_2027=" + String.valueOf(ghg_goal_2027));
			sb.append(",ghg_goal_2028=" + String.valueOf(ghg_goal_2028));
			sb.append(",ghg_goal_2029=" + String.valueOf(ghg_goal_2029));
			sb.append(",ghg_goal_2030=" + String.valueOf(ghg_goal_2030));
			sb.append(",state_fullname=" + state_fullname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class final_outputStruct implements
			routines.system.IPersistableRow<final_outputStruct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity_2011;

		public BigDecimal getGhg_quantity_2011() {
			return this.ghg_quantity_2011;
		}

		public BigDecimal ghg_quantity_2012;

		public BigDecimal getGhg_quantity_2012() {
			return this.ghg_quantity_2012;
		}

		public BigDecimal ghg_quantity_2013;

		public BigDecimal getGhg_quantity_2013() {
			return this.ghg_quantity_2013;
		}

		public BigDecimal ghg_quantity_2014;

		public BigDecimal getGhg_quantity_2014() {
			return this.ghg_quantity_2014;
		}

		public BigDecimal ghg_goal_2022;

		public BigDecimal getGhg_goal_2022() {
			return this.ghg_goal_2022;
		}

		public BigDecimal ghg_goal_2023;

		public BigDecimal getGhg_goal_2023() {
			return this.ghg_goal_2023;
		}

		public BigDecimal ghg_goal_2024;

		public BigDecimal getGhg_goal_2024() {
			return this.ghg_goal_2024;
		}

		public BigDecimal ghg_goal_2025;

		public BigDecimal getGhg_goal_2025() {
			return this.ghg_goal_2025;
		}

		public BigDecimal ghg_goal_2026;

		public BigDecimal getGhg_goal_2026() {
			return this.ghg_goal_2026;
		}

		public BigDecimal ghg_goal_2027;

		public BigDecimal getGhg_goal_2027() {
			return this.ghg_goal_2027;
		}

		public BigDecimal ghg_goal_2028;

		public BigDecimal getGhg_goal_2028() {
			return this.ghg_goal_2028;
		}

		public BigDecimal ghg_goal_2029;

		public BigDecimal getGhg_goal_2029() {
			return this.ghg_goal_2029;
		}

		public BigDecimal ghg_goal_2030;

		public BigDecimal getGhg_goal_2030() {
			return this.ghg_goal_2030;
		}

		public String state_fullname;

		public String getState_fullname() {
			return this.state_fullname;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

					this.ghg_quantity_2011 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2012 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2013 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2014 = (BigDecimal) dis.readObject();

					this.ghg_goal_2022 = (BigDecimal) dis.readObject();

					this.ghg_goal_2023 = (BigDecimal) dis.readObject();

					this.ghg_goal_2024 = (BigDecimal) dis.readObject();

					this.ghg_goal_2025 = (BigDecimal) dis.readObject();

					this.ghg_goal_2026 = (BigDecimal) dis.readObject();

					this.ghg_goal_2027 = (BigDecimal) dis.readObject();

					this.ghg_goal_2028 = (BigDecimal) dis.readObject();

					this.ghg_goal_2029 = (BigDecimal) dis.readObject();

					this.ghg_goal_2030 = (BigDecimal) dis.readObject();

					this.state_fullname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2011);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2012);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2013);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2014);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2022);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2023);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2024);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2025);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2026);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2027);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2028);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2029);

				// BigDecimal

				dos.writeObject(this.ghg_goal_2030);

				// String

				writeString(this.state_fullname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",ghg_quantity_2011=" + String.valueOf(ghg_quantity_2011));
			sb.append(",ghg_quantity_2012=" + String.valueOf(ghg_quantity_2012));
			sb.append(",ghg_quantity_2013=" + String.valueOf(ghg_quantity_2013));
			sb.append(",ghg_quantity_2014=" + String.valueOf(ghg_quantity_2014));
			sb.append(",ghg_goal_2022=" + String.valueOf(ghg_goal_2022));
			sb.append(",ghg_goal_2023=" + String.valueOf(ghg_goal_2023));
			sb.append(",ghg_goal_2024=" + String.valueOf(ghg_goal_2024));
			sb.append(",ghg_goal_2025=" + String.valueOf(ghg_goal_2025));
			sb.append(",ghg_goal_2026=" + String.valueOf(ghg_goal_2026));
			sb.append(",ghg_goal_2027=" + String.valueOf(ghg_goal_2027));
			sb.append(",ghg_goal_2028=" + String.valueOf(ghg_goal_2028));
			sb.append(",ghg_goal_2029=" + String.valueOf(ghg_goal_2029));
			sb.append(",ghg_goal_2030=" + String.valueOf(ghg_goal_2030));
			sb.append(",state_fullname=" + state_fullname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(final_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FLIGHT_OutStruct implements
			routines.system.IPersistableRow<FLIGHT_OutStruct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity_2011;

		public BigDecimal getGhg_quantity_2011() {
			return this.ghg_quantity_2011;
		}

		public BigDecimal ghg_quantity_2012;

		public BigDecimal getGhg_quantity_2012() {
			return this.ghg_quantity_2012;
		}

		public BigDecimal ghg_quantity_2013;

		public BigDecimal getGhg_quantity_2013() {
			return this.ghg_quantity_2013;
		}

		public BigDecimal ghg_quantity_2014;

		public BigDecimal getGhg_quantity_2014() {
			return this.ghg_quantity_2014;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

					this.ghg_quantity_2011 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2012 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2013 = (BigDecimal) dis.readObject();

					this.ghg_quantity_2014 = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2011);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2012);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2013);

				// BigDecimal

				dos.writeObject(this.ghg_quantity_2014);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",ghg_quantity_2011=" + String.valueOf(ghg_quantity_2011));
			sb.append(",ghg_quantity_2012=" + String.valueOf(ghg_quantity_2012));
			sb.append(",ghg_quantity_2013=" + String.valueOf(ghg_quantity_2013));
			sb.append(",ghg_quantity_2014=" + String.valueOf(ghg_quantity_2014));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FLIGHT_OutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.state = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.state = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public Integer ghgrp_id;

		public Integer getGhgrp_id() {
			return this.ghgrp_id;
		}

		public String reported_address;

		public String getReported_address() {
			return this.reported_address;
		}

		public Float latitude;

		public Float getLatitude() {
			return this.latitude;
		}

		public Float longitude;

		public Float getLongitude() {
			return this.longitude;
		}

		public String city_name;

		public String getCity_name() {
			return this.city_name;
		}

		public String county_name;

		public String getCounty_name() {
			return this.county_name;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String parent_companies;

		public String getParent_companies() {
			return this.parent_companies;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		public String sub_parts;

		public String getSub_parts() {
			return this.sub_parts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.facility_name = readString(dis);

					this.ghgrp_id = readInteger(dis);

					this.reported_address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readFloat();
					}

					this.city_name = readString(dis);

					this.county_name = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.parent_companies = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

					this.sub_parts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.facility_name, dos);

				// Integer

				writeInteger(this.ghgrp_id, dos);

				// String

				writeString(this.reported_address, dos);

				// Float

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.latitude);
				}

				// Float

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.longitude);
				}

				// String

				writeString(this.city_name, dos);

				// String

				writeString(this.county_name, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.parent_companies, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

				// String

				writeString(this.sub_parts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",facility_name=" + facility_name);
			sb.append(",ghgrp_id=" + String.valueOf(ghgrp_id));
			sb.append(",reported_address=" + reported_address);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",city_name=" + city_name);
			sb.append(",county_name=" + county_name);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",parent_companies=" + parent_companies);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append(",sub_parts=" + sub_parts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_2Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public Integer ghgrp_id;

		public Integer getGhgrp_id() {
			return this.ghgrp_id;
		}

		public String reported_address;

		public String getReported_address() {
			return this.reported_address;
		}

		public Float latitude;

		public Float getLatitude() {
			return this.latitude;
		}

		public Float longitude;

		public Float getLongitude() {
			return this.longitude;
		}

		public String city_name;

		public String getCity_name() {
			return this.city_name;
		}

		public String county_name;

		public String getCounty_name() {
			return this.county_name;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String parent_companies;

		public String getParent_companies() {
			return this.parent_companies;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		public String sub_parts;

		public String getSub_parts() {
			return this.sub_parts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.facility_name = readString(dis);

					this.ghgrp_id = readInteger(dis);

					this.reported_address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readFloat();
					}

					this.city_name = readString(dis);

					this.county_name = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.parent_companies = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

					this.sub_parts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.facility_name, dos);

				// Integer

				writeInteger(this.ghgrp_id, dos);

				// String

				writeString(this.reported_address, dos);

				// Float

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.latitude);
				}

				// Float

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.longitude);
				}

				// String

				writeString(this.city_name, dos);

				// String

				writeString(this.county_name, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.parent_companies, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

				// String

				writeString(this.sub_parts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",facility_name=" + facility_name);
			sb.append(",ghgrp_id=" + String.valueOf(ghgrp_id));
			sb.append(",reported_address=" + reported_address);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",city_name=" + city_name);
			sb.append(",county_name=" + county_name);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",parent_companies=" + parent_companies);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append(",sub_parts=" + sub_parts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputExcel_1Process(globalMap);
				tFileInputExcel_3Process(globalMap);
				tFileInputExcel_4Process(globalMap);
				tFileInputExcel_5Process(globalMap);

				row1Struct row1 = new row1Struct();
				row7Struct row7 = new row7Struct();
				FLIGHT_OutStruct FLIGHT_Out = new FLIGHT_OutStruct();
				final_outputStruct final_output = new final_outputStruct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				int tos_count_tAggregateRow_2_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer reporting_year;
					String state;
					BigDecimal ghg_quantity_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.reporting_year == null) ? 0
											: this.reporting_year.hashCode());

							result = prime
									* result
									+ ((this.state == null) ? 0 : this.state
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.reporting_year == null) {
							if (other.reporting_year != null)
								return false;
						} else if (!this.reporting_year
								.equals(other.reporting_year))
							return false;

						if (this.state == null) {
							if (other.state != null)
								return false;
						} else if (!this.state.equals(other.state))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_2.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_2.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_2 = context.recv_dir
						+ "/FLIGHT 2011 Power Plant Extract.xls";
				final jxl.Workbook workbook_tFileInputExcel_2;

				java.io.InputStream toClose_tFileInputExcel_2 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_2 = null;
				try {
					if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_2 = (java.io.InputStream) source_tFileInputExcel_2;
						buffIStreamtFileInputExcel_2 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_2);
						workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_2,
								workbookSettings_tFileInputExcel_2);
					} else if (source_tFileInputExcel_2 instanceof String) {
						toClose_tFileInputExcel_2 = new java.io.FileInputStream(
								source_tFileInputExcel_2.toString());
						buffIStreamtFileInputExcel_2 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_2);
						workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_2,
								workbookSettings_tFileInputExcel_2);
					} else {
						workbook_tFileInputExcel_2 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_2 != null) {
							buffIStreamtFileInputExcel_2.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_2
							.addAll(regexUtil_tFileInputExcel_2.getSheets(
									workbook_tFileInputExcel_2,
									"FLIGHT Facilities and GHG Quant", false));
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_2
									.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheet_FilterNullList_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 6;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += sheet_tFileInputExcel_2
									.getRows();
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_2 = null;
						jxl.Sheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_2 = df_tFileInputExcel_2
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1
									&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2
									+ currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRows();
							}
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2
												- rowCount_tFileInputExcel_2);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET",
									sheet_tFileInputExcel_2.getName());
							row1 = null;
							int tempRowLength_tFileInputExcel_2 = 13;

							int columnIndex_tFileInputExcel_2 = 0;

							//
							// end%>

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > row_tFileInputExcel_2.length ? row_tFileInputExcel_2.length
									: end_column_tFileInputExcel_2;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {

								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {

									jxl.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2[i
											+ start_column_tFileInputExcel_2];
									temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
											.getContents();

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_2 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "reporting_year";
									row1.reporting_year = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
								} else {
									row1.reporting_year = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "facility_name";
									row1.facility_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.facility_name = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "ghgrp_id";
									row1.ghgrp_id = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
								} else {
									row1.ghgrp_id = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "reported_address";
									row1.reported_address = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.reported_address = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "latitude";
									row1.latitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
								} else {
									row1.latitude = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "longitude";
									row1.longitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
								} else {
									row1.longitude = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "city_name";
									row1.city_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.city_name = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "county_name";
									row1.county_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.county_name = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "state";
									row1.state = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.state = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "zip";
									row1.zip = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.zip = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 10;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "parent_companies";
									row1.parent_companies = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.parent_companies = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 11;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "ghg_quantity";
									row1.ghg_quantity = ParserUtils
											.parseTo_BigDecimal(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
								} else {
									row1.ghg_quantity = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 12;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "sub_parts";
									row1.sub_parts = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.sub_parts = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tAggregateRow_2_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_2";

								currentComponent = "tAggregateRow_2_AGGOUT";

								operation_finder_tAggregateRow_2.reporting_year = row1.reporting_year;
								operation_finder_tAggregateRow_2.state = row1.state;

								operation_finder_tAggregateRow_2.hashCodeDirty = true;

								operation_result_tAggregateRow_2 = hash_tAggregateRow_2
										.get(operation_finder_tAggregateRow_2);

								if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

									operation_result_tAggregateRow_2.reporting_year = operation_finder_tAggregateRow_2.reporting_year;
									operation_result_tAggregateRow_2.state = operation_finder_tAggregateRow_2.state;

									hash_tAggregateRow_2.put(
											operation_result_tAggregateRow_2,
											operation_result_tAggregateRow_2);

								} // G_OutMain_AggR_001

								if (operation_result_tAggregateRow_2.ghg_quantity_sum == null) {
									operation_result_tAggregateRow_2.ghg_quantity_sum = new BigDecimal(
											0);
								}
								operation_result_tAggregateRow_2.ghg_quantity_sum = operation_result_tAggregateRow_2.ghg_quantity_sum
										.add(new BigDecimal(String
												.valueOf(row1.ghg_quantity)));

								tos_count_tAggregateRow_2_AGGOUT++;

								/**
								 * [tAggregateRow_2_AGGOUT main ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE",
								nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.close();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablefinal_outputStruct extends final_outputStruct
						implements Comparable<Comparablefinal_outputStruct> {

					public int compareTo(Comparablefinal_outputStruct other) {

						if (this.state == null && other.state != null) {
							return -1;

						} else if (this.state != null && other.state == null) {
							return 1;

						} else if (this.state != null && other.state != null) {
							if (!this.state.equals(other.state)) {
								return this.state.compareTo(other.state);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablefinal_outputStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablefinal_outputStruct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				final_outputStruct final_output_tmp = new final_outputStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				FLIGHT_OutStruct FLIGHT_Out_tmp = new FLIGHT_OutStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE",
						values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row7.reporting_year = aggregated_row_tAggregateRow_2.reporting_year;

					row7.state = aggregated_row_tAggregateRow_2.state;
					row7.ghg_quantity = aggregated_row_tAggregateRow_2.ghg_quantity_sum;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row8"
					// /////////////////////////////////////////////

					boolean forceLooprow8 = false;

					row8Struct row8ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row8HashKey.state = row7.state;

						row8HashKey.hashCodeDirty = true;

						tHash_Lookup_row8.lookup(row8HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.state = '"
						// + row8HashKey.state + "'");
					} // G 071

					row8Struct row8 = null;

					row8Struct fromLookup_row8 = null;
					row8 = row8Default;

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.hasNext()) { // G 099

						fromLookup_row8 = tHash_Lookup_row8.next();

					} // G 099

					if (fromLookup_row8 != null) {
						row8 = fromLookup_row8;
					}

					// /////////////////////////////////////////////
					// Starting Lookup Table "row9"
					// /////////////////////////////////////////////

					boolean forceLooprow9 = false;

					row9Struct row9ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row9HashKey.state = row7.state;

						row9HashKey.hashCodeDirty = true;

						tHash_Lookup_row9.lookup(row9HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row9 != null
							&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.state = '"
						// + row9HashKey.state + "'");
					} // G 071

					row9Struct row9 = null;

					row9Struct fromLookup_row9 = null;
					row9 = row9Default;

					if (tHash_Lookup_row9 != null
							&& tHash_Lookup_row9.hasNext()) { // G 099

						fromLookup_row9 = tHash_Lookup_row9.next();

					} // G 099

					if (fromLookup_row9 != null) {
						row9 = fromLookup_row9;
					}

					// /////////////////////////////////////////////
					// Starting Lookup Table "row10"
					// /////////////////////////////////////////////

					boolean forceLooprow10 = false;

					row10Struct row10ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row10HashKey.state = row7.state;

						row10HashKey.hashCodeDirty = true;

						tHash_Lookup_row10.lookup(row10HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row10 != null
							&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.state = '"
						// + row10HashKey.state + "'");
					} // G 071

					row10Struct row10 = null;

					row10Struct fromLookup_row10 = null;
					row10 = row10Default;

					if (tHash_Lookup_row10 != null
							&& tHash_Lookup_row10.hasNext()) { // G 099

						fromLookup_row10 = tHash_Lookup_row10.next();

					} // G 099

					if (fromLookup_row10 != null) {
						row10 = fromLookup_row10;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						FLIGHT_Out = null;

						// # Output table : 'FLIGHT_Out'
						FLIGHT_Out_tmp.state = row7.state;
						FLIGHT_Out_tmp.ghg_quantity_2011 = row7.ghg_quantity;
						FLIGHT_Out_tmp.ghg_quantity_2012 = row8.ghg_quantity;
						FLIGHT_Out_tmp.ghg_quantity_2013 = row9.ghg_quantity;
						FLIGHT_Out_tmp.ghg_quantity_2014 = row10.ghg_quantity;
						FLIGHT_Out = FLIGHT_Out_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "FLIGHT_Out"
					if (FLIGHT_Out != null) {

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row2HashKey.state = FLIGHT_Out.state;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.state = '"
							// + row2HashKey.state + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							final_output = null;

							// # Output table : 'final_output'
							final_output_tmp.state = FLIGHT_Out.state;
							final_output_tmp.ghg_quantity_2011 = FLIGHT_Out.ghg_quantity_2011;
							final_output_tmp.ghg_quantity_2012 = FLIGHT_Out.ghg_quantity_2012;
							final_output_tmp.ghg_quantity_2013 = FLIGHT_Out.ghg_quantity_2013;
							final_output_tmp.ghg_quantity_2014 = FLIGHT_Out.ghg_quantity_2014;
							final_output_tmp.ghg_goal_2022 = row2.ghg_goal_2022;
							final_output_tmp.ghg_goal_2023 = row2.ghg_goal_2023;
							final_output_tmp.ghg_goal_2024 = row2.ghg_goal_2024;
							final_output_tmp.ghg_goal_2025 = row2.ghg_goal_2025;
							final_output_tmp.ghg_goal_2026 = row2.ghg_goal_2026;
							final_output_tmp.ghg_goal_2027 = row2.ghg_goal_2027;
							final_output_tmp.ghg_goal_2028 = row2.ghg_goal_2028;
							final_output_tmp.ghg_goal_2029 = row2.ghg_goal_2029;
							final_output_tmp.ghg_goal_2030 = row2.ghg_goal_2030;
							final_output_tmp.state_fullname = row2.state_name;
							final_output = final_output_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "final_output"
						if (final_output != null) {

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							Comparablefinal_outputStruct arrayRowtSortRow_1_SortOut = new Comparablefinal_outputStruct();

							arrayRowtSortRow_1_SortOut.state = final_output.state;
							arrayRowtSortRow_1_SortOut.ghg_quantity_2011 = final_output.ghg_quantity_2011;
							arrayRowtSortRow_1_SortOut.ghg_quantity_2012 = final_output.ghg_quantity_2012;
							arrayRowtSortRow_1_SortOut.ghg_quantity_2013 = final_output.ghg_quantity_2013;
							arrayRowtSortRow_1_SortOut.ghg_quantity_2014 = final_output.ghg_quantity_2014;
							arrayRowtSortRow_1_SortOut.ghg_goal_2022 = final_output.ghg_goal_2022;
							arrayRowtSortRow_1_SortOut.ghg_goal_2023 = final_output.ghg_goal_2023;
							arrayRowtSortRow_1_SortOut.ghg_goal_2024 = final_output.ghg_goal_2024;
							arrayRowtSortRow_1_SortOut.ghg_goal_2025 = final_output.ghg_goal_2025;
							arrayRowtSortRow_1_SortOut.ghg_goal_2026 = final_output.ghg_goal_2026;
							arrayRowtSortRow_1_SortOut.ghg_goal_2027 = final_output.ghg_goal_2027;
							arrayRowtSortRow_1_SortOut.ghg_goal_2028 = final_output.ghg_goal_2028;
							arrayRowtSortRow_1_SortOut.ghg_goal_2029 = final_output.ghg_goal_2029;
							arrayRowtSortRow_1_SortOut.ghg_goal_2030 = final_output.ghg_goal_2030;
							arrayRowtSortRow_1_SortOut.state_fullname = final_output.state_fullname;
							list_tSortRow_1_SortOut
									.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

						} // End of branch "final_output"

					} // End of branch "FLIGHT_Out"

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				final_outputStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new Comparablefinal_outputStruct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_Out", false);
				start_Hash.put("tWriteJSONField_1_Out",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				int tos_count_tWriteJSONField_1_Out = 0;

				// tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out = true;

				String strCompCache_tWriteJSONField_1_Out = null;

				java.util.Queue<row3Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row3Struct>();

				class ThreadXMLField_tWriteJSONField_1_Out extends Thread {

					java.util.Queue<row3Struct> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					String currentComponent;

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						lastException = null;
					}

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						globalMap.put("flows_tWriteJSONField_1_In", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tWriteJSONField_1_InProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						}
					}
				}

				ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(
						listGroupby_tWriteJSONField_1_Out);

				txf_tWriteJSONField_1_Out.start();

				java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String, String>();

				class NestXMLTool_tWriteJSONField_1_Out {
					public void parseAndAdd(org.dom4j.Element nestRoot,
							String value) {
						try {
							org.dom4j.Document doc4Str = org.dom4j.DocumentHelper
									.parseText("<root>" + value + "</root>");
							nestRoot.setContent(doc4Str.getRootElement()
									.content());
						} catch (java.lang.Exception e) {
							e.printStackTrace();
							nestRoot.setText(value);
						}
					}

					public void setText(org.dom4j.Element element, String value) {
						if (value.startsWith("<![CDATA[")
								&& value.endsWith("]]>")) {
							String text = value
									.substring(9, value.length() - 3);
							element.addCDATA(text);
						} else {
							element.setText(value);
						}
					}

					public void replaceDefaultNameSpace(
							org.dom4j.Element nestRoot) {
						if (nestRoot != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) nestRoot
									.elements()) {
								if (("").equals(tmp.getQName().getNamespace()
										.getURI())
										&& ("").equals(tmp.getQName()
												.getNamespace().getPrefix())) {
									tmp.setQName(org.dom4j.DocumentHelper
											.createQName(tmp.getName(),
													nestRoot.getQName()
															.getNamespace()));
								}
								replaceDefaultNameSpace(tmp);
							}
						}
					}

					public void removeEmptyElement(org.dom4j.Element root) {
						if (root != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) root
									.elements()) {
								removeEmptyElement(tmp);
							}
							if (root.content().size() == 0
									&& root.attributes().size() == 0
									&& root.declaredNamespaces().size() == 0) {
								if (root.getParent() != null) {
									root.getParent().remove(root);
								}
							}
						}
					}
				}
				NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

				row11Struct rowStructOutput_tWriteJSONField_1_Out = null;
				// sort group root element for judgement of group
				java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
				org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
				org.dom4j.Document doc_tWriteJSONField_1_Out = org.dom4j.DocumentHelper
						.createDocument();
				org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat
						.createCompactFormat();
				format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
				format_tWriteJSONField_1_Out.setTrimText(false);
				format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
				int[] orders_tWriteJSONField_1_Out = new int[1];

				/**
				 * [tWriteJSONField_1_Out begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				final_outputStruct[] array_tSortRow_1_SortIn = (final_outputStruct[]) globalMap
						.get("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				final_outputStruct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row11.state = current_tSortRow_1_SortIn.state;
					row11.ghg_quantity_2011 = current_tSortRow_1_SortIn.ghg_quantity_2011;
					row11.ghg_quantity_2012 = current_tSortRow_1_SortIn.ghg_quantity_2012;
					row11.ghg_quantity_2013 = current_tSortRow_1_SortIn.ghg_quantity_2013;
					row11.ghg_quantity_2014 = current_tSortRow_1_SortIn.ghg_quantity_2014;
					row11.ghg_goal_2022 = current_tSortRow_1_SortIn.ghg_goal_2022;
					row11.ghg_goal_2023 = current_tSortRow_1_SortIn.ghg_goal_2023;
					row11.ghg_goal_2024 = current_tSortRow_1_SortIn.ghg_goal_2024;
					row11.ghg_goal_2025 = current_tSortRow_1_SortIn.ghg_goal_2025;
					row11.ghg_goal_2026 = current_tSortRow_1_SortIn.ghg_goal_2026;
					row11.ghg_goal_2027 = current_tSortRow_1_SortIn.ghg_goal_2027;
					row11.ghg_goal_2028 = current_tSortRow_1_SortIn.ghg_goal_2028;
					row11.ghg_goal_2029 = current_tSortRow_1_SortIn.ghg_goal_2029;
					row11.ghg_goal_2030 = current_tSortRow_1_SortIn.ghg_goal_2030;
					row11.state_fullname = current_tSortRow_1_SortIn.state_fullname;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tWriteJSONField_1_Out main ] start
					 */

					currentVirtualComponent = "tWriteJSONField_1";

					currentComponent = "tWriteJSONField_1_Out";

					if (txf_tWriteJSONField_1_Out.getLastException() != null) {
						currentComponent = txf_tWriteJSONField_1_Out
								.getCurrentComponent();
						throw txf_tWriteJSONField_1_Out.getLastException();
					}
					nb_line_tWriteJSONField_1_Out++;
					valueMap_tWriteJSONField_1_Out.clear();
					valueMap_tWriteJSONField_1_Out.put("state",
							(row11.state != null ? row11.state.toString()
									: null));
					valueMap_tWriteJSONField_1_Out
							.put("ghg_quantity_2011",
									(row11.ghg_quantity_2011 != null ? row11.ghg_quantity_2011
											.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out
							.put("ghg_quantity_2012",
									(row11.ghg_quantity_2012 != null ? row11.ghg_quantity_2012
											.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out
							.put("ghg_quantity_2013",
									(row11.ghg_quantity_2013 != null ? row11.ghg_quantity_2013
											.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out
							.put("ghg_quantity_2014",
									(row11.ghg_quantity_2014 != null ? row11.ghg_quantity_2014
											.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2022",
							(row11.ghg_goal_2022 != null ? row11.ghg_goal_2022
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2023",
							(row11.ghg_goal_2023 != null ? row11.ghg_goal_2023
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2024",
							(row11.ghg_goal_2024 != null ? row11.ghg_goal_2024
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2025",
							(row11.ghg_goal_2025 != null ? row11.ghg_goal_2025
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2026",
							(row11.ghg_goal_2026 != null ? row11.ghg_goal_2026
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2027",
							(row11.ghg_goal_2027 != null ? row11.ghg_goal_2027
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2028",
							(row11.ghg_goal_2028 != null ? row11.ghg_goal_2028
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2029",
							(row11.ghg_goal_2029 != null ? row11.ghg_goal_2029
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out.put(
							"ghg_goal_2030",
							(row11.ghg_goal_2030 != null ? row11.ghg_goal_2030
									.toPlainString() : null));
					valueMap_tWriteJSONField_1_Out
							.put("state_fullname",
									(row11.state_fullname != null ? row11.state_fullname
											.toString() : null));
					String strTemp_tWriteJSONField_1_Out = "";
					if (strCompCache_tWriteJSONField_1_Out == null) {
						strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;

						rowStructOutput_tWriteJSONField_1_Out = row11;

					} else {
						nestXMLTool_tWriteJSONField_1_Out
								.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out
										.getRootElement());
						java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
						org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
								strWriter_tWriteJSONField_1_Out,
								format_tWriteJSONField_1_Out);
						output_tWriteJSONField_1_Out
								.write(doc_tWriteJSONField_1_Out);
						output_tWriteJSONField_1_Out.close();

						row3Struct row_tWriteJSONField_1_Out = new row3Struct();

						row_tWriteJSONField_1_Out.state = strWriter_tWriteJSONField_1_Out
								.toString();
						listGroupby_tWriteJSONField_1_Out
								.add(row_tWriteJSONField_1_Out);

						doc_tWriteJSONField_1_Out.clearContent();
						needRoot_tWriteJSONField_1_Out = true;
						for (int i_tWriteJSONField_1_Out = 0; i_tWriteJSONField_1_Out < orders_tWriteJSONField_1_Out.length; i_tWriteJSONField_1_Out++) {
							orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
						}

						if (groupbyList_tWriteJSONField_1_Out != null
								&& groupbyList_tWriteJSONField_1_Out.size() >= 0) {
							groupbyList_tWriteJSONField_1_Out.clear();
						}
						strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;
						rowStructOutput_tWriteJSONField_1_Out = row11;

					}

					org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;

					// build root xml tree
					if (needRoot_tWriteJSONField_1_Out) {
						needRoot_tWriteJSONField_1_Out = false;
						org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out
								.addElement("state_group");
						subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
						org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out
								.addElement("acronymn");
						if (valueMap_tWriteJSONField_1_Out.get("state") != null) {
							nestXMLTool_tWriteJSONField_1_Out
									.setText(root_0_tWriteJSONField_1_Out,
											valueMap_tWriteJSONField_1_Out
													.get("state"));
						}
						org.dom4j.Element root_1_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out
								.addElement("ghg_emissions");
						org.dom4j.Element root_1_0_tWriteJSONField_1_Out = root_1_tWriteJSONField_1_Out
								.addElement("emissions_2011");
						if (valueMap_tWriteJSONField_1_Out
								.get("ghg_quantity_2011") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_1_0_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_quantity_2011"));
						}
						org.dom4j.Element root_1_1_tWriteJSONField_1_Out = root_1_tWriteJSONField_1_Out
								.addElement("emissions_2012");
						if (valueMap_tWriteJSONField_1_Out
								.get("ghg_quantity_2012") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_1_1_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_quantity_2012"));
						}
						org.dom4j.Element root_1_2_tWriteJSONField_1_Out = root_1_tWriteJSONField_1_Out
								.addElement("emissions_2013");
						if (valueMap_tWriteJSONField_1_Out
								.get("ghg_quantity_2013") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_1_2_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_quantity_2013"));
						}
						org.dom4j.Element root_1_3_tWriteJSONField_1_Out = root_1_tWriteJSONField_1_Out
								.addElement("emissions_2014");
						if (valueMap_tWriteJSONField_1_Out
								.get("ghg_quantity_2014") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_1_3_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_quantity_2014"));
						}
						org.dom4j.Element root_2_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out
								.addElement("ghg_goals");
						org.dom4j.Element root_2_0_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2022");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2022") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_0_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2022"));
						}
						org.dom4j.Element root_2_1_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2023");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2023") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_1_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2023"));
						}
						org.dom4j.Element root_2_2_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2024");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2024") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_2_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2024"));
						}
						org.dom4j.Element root_2_3_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2025");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2025") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_3_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2025"));
						}
						org.dom4j.Element root_2_4_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2026");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2026") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_4_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2026"));
						}
						org.dom4j.Element root_2_5_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2027");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2027") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_5_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2027"));
						}
						org.dom4j.Element root_2_6_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2028");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2028") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_6_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2028"));
						}
						org.dom4j.Element root_2_7_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2029");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2029") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_7_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2029"));
						}
						org.dom4j.Element root_2_8_tWriteJSONField_1_Out = root_2_tWriteJSONField_1_Out
								.addElement("goals_2030");
						if (valueMap_tWriteJSONField_1_Out.get("ghg_goal_2030") != null) {
							nestXMLTool_tWriteJSONField_1_Out.setText(
									root_2_8_tWriteJSONField_1_Out,
									valueMap_tWriteJSONField_1_Out
											.get("ghg_goal_2030"));
						}
						root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
					} else {
						subTreeRootParent_tWriteJSONField_1_Out = root4Group_tWriteJSONField_1_Out;
					}
					// build group xml tree
					// build loop xml tree
					org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper
							.createElement("name");
					if (orders_tWriteJSONField_1_Out[0] == 0) {
						orders_tWriteJSONField_1_Out[0] = 0;
					}
					if (1 < orders_tWriteJSONField_1_Out.length) {
						orders_tWriteJSONField_1_Out[1] = 0;
					}
					subTreeRootParent_tWriteJSONField_1_Out.elements().add(
							orders_tWriteJSONField_1_Out[0]++,
							loop_tWriteJSONField_1_Out);
					if (valueMap_tWriteJSONField_1_Out.get("state_fullname") != null) {
						nestXMLTool_tWriteJSONField_1_Out.setText(
								loop_tWriteJSONField_1_Out,
								valueMap_tWriteJSONField_1_Out
										.get("state_fullname"));
					}

					tos_count_tWriteJSONField_1_Out++;

					/**
					 * [tWriteJSONField_1_Out main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out end ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				if (nb_line_tWriteJSONField_1_Out > 0) {
					nestXMLTool_tWriteJSONField_1_Out
							.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out
									.getRootElement());
					java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
					org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
							strWriter_tWriteJSONField_1_Out,
							format_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out
							.write(doc_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out.close();
					row3Struct row_tWriteJSONField_1_Out = new row3Struct();

					row_tWriteJSONField_1_Out.state = strWriter_tWriteJSONField_1_Out
							.toString();
					listGroupby_tWriteJSONField_1_Out
							.add(row_tWriteJSONField_1_Out);

				}
				globalMap.put("tWriteJSONField_1_Out_NB_LINE",
						nb_line_tWriteJSONField_1_Out);
				globalMap
						.put("tWriteJSONField_1_In_FINISH"
								+ (listGroupby_tWriteJSONField_1_Out == null ? ""
										: listGroupby_tWriteJSONField_1_Out
												.hashCode()), "true");

				txf_tWriteJSONField_1_Out.join();
				if (txf_tWriteJSONField_1_Out.getLastException() != null) {
					currentComponent = txf_tWriteJSONField_1_Out
							.getCurrentComponent();
					throw txf_tWriteJSONField_1_Out.getLastException();
				}

				resourceMap.put("finish_tWriteJSONField_1_Out", true);

				ok_Hash.put("tWriteJSONField_1_Out", true);
				end_Hash.put("tWriteJSONField_1_Out",
						System.currentTimeMillis());

				/**
				 * [tWriteJSONField_1_Out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue) globalMap
						.get("queue_tWriteJSONField_1_In");
				if (resourceMap.get("finish_tWriteJSONField_1_Out") == null) {
					globalMap
							.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
									+ (listGroupby_tWriteJSONField_1_Out == null ? ""
											: listGroupby_tWriteJSONField_1_Out
													.hashCode()), "true");
				}

				if (listGroupby_tWriteJSONField_1_Out != null) {
					globalMap
							.put("tWriteJSONField_1_In_FINISH"
									+ (listGroupby_tWriteJSONField_1_Out == null ? ""
											: listGroupby_tWriteJSONField_1_Out
													.hashCode()), "true");
				}

				/**
				 * [tWriteJSONField_1_Out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.state == null) ? 0 : this.state.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.state == null) {
				if (other.state != null)
					return false;

			} else if (!this.state.equals(other.state))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.reporting_year = this.reporting_year;
			other.state = this.state;
			other.ghg_quantity = this.ghg_quantity;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.state = this.state;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.reporting_year = readInteger(dis, ois);

				this.ghg_quantity = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.reporting_year, dos, oos);

				oos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.state, other.state);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.state = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public Integer ghgrp_id;

		public Integer getGhgrp_id() {
			return this.ghgrp_id;
		}

		public String reported_address;

		public String getReported_address() {
			return this.reported_address;
		}

		public Float latitude;

		public Float getLatitude() {
			return this.latitude;
		}

		public Float longitude;

		public Float getLongitude() {
			return this.longitude;
		}

		public String city_name;

		public String getCity_name() {
			return this.city_name;
		}

		public String county_name;

		public String getCounty_name() {
			return this.county_name;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String parent_companies;

		public String getParent_companies() {
			return this.parent_companies;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		public String sub_parts;

		public String getSub_parts() {
			return this.sub_parts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.facility_name = readString(dis);

					this.ghgrp_id = readInteger(dis);

					this.reported_address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readFloat();
					}

					this.city_name = readString(dis);

					this.county_name = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.parent_companies = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

					this.sub_parts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.facility_name, dos);

				// Integer

				writeInteger(this.ghgrp_id, dos);

				// String

				writeString(this.reported_address, dos);

				// Float

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.latitude);
				}

				// Float

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.longitude);
				}

				// String

				writeString(this.city_name, dos);

				// String

				writeString(this.county_name, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.parent_companies, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

				// String

				writeString(this.sub_parts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",facility_name=" + facility_name);
			sb.append(",ghgrp_id=" + String.valueOf(ghgrp_id));
			sb.append(",reported_address=" + reported_address);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",city_name=" + city_name);
			sb.append(",county_name=" + county_name);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",parent_companies=" + parent_companies);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append(",sub_parts=" + sub_parts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				int tos_count_tAggregateRow_5_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer reporting_year;
					String state;
					BigDecimal ghg_quantity_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.reporting_year == null) ? 0
											: this.reporting_year.hashCode());

							result = prime
									* result
									+ ((this.state == null) ? 0 : this.state
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.reporting_year == null) {
							if (other.reporting_year != null)
								return false;
						} else if (!this.reporting_year
								.equals(other.reporting_year))
							return false;

						if (this.state == null) {
							if (other.state != null)
								return false;
						} else if (!this.state.equals(other.state))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_1 = context.recv_dir
						+ "/FLIGHT 2012 Power Plant Extract.xls";
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(
								source_tFileInputExcel_1.toString());
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_1 != null) {
							buffIStreamtFileInputExcel_1.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_1
							.addAll(regexUtil_tFileInputExcel_1.getSheets(
									workbook_tFileInputExcel_1,
									"FLIGHT Facilities and GHG Quant", false));
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 6;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1
									.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getName());
							row4 = null;
							int tempRowLength_tFileInputExcel_1 = 13;

							int columnIndex_tFileInputExcel_1 = 0;

							//
							// end%>

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
											.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row4 = new row4Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "reporting_year";
									row4.reporting_year = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row4.reporting_year = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "facility_name";
									row4.facility_name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.facility_name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ghgrp_id";
									row4.ghgrp_id = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row4.ghgrp_id = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "reported_address";
									row4.reported_address = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.reported_address = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "latitude";
									row4.latitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row4.latitude = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "longitude";
									row4.longitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row4.longitude = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "city_name";
									row4.city_name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.city_name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "county_name";
									row4.county_name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.county_name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "state";
									row4.state = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.state = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "zip";
									row4.zip = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.zip = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "parent_companies";
									row4.parent_companies = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.parent_companies = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ghg_quantity";
									row4.ghg_quantity = ParserUtils
											.parseTo_BigDecimal(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row4.ghg_quantity = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "sub_parts";
									row4.sub_parts = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row4.sub_parts = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row4 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tAggregateRow_5_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_5";

								currentComponent = "tAggregateRow_5_AGGOUT";

								operation_finder_tAggregateRow_5.reporting_year = row4.reporting_year;
								operation_finder_tAggregateRow_5.state = row4.state;

								operation_finder_tAggregateRow_5.hashCodeDirty = true;

								operation_result_tAggregateRow_5 = hash_tAggregateRow_5
										.get(operation_finder_tAggregateRow_5);

								if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

									operation_result_tAggregateRow_5.reporting_year = operation_finder_tAggregateRow_5.reporting_year;
									operation_result_tAggregateRow_5.state = operation_finder_tAggregateRow_5.state;

									hash_tAggregateRow_5.put(
											operation_result_tAggregateRow_5,
											operation_result_tAggregateRow_5);

								} // G_OutMain_AggR_001

								if (operation_result_tAggregateRow_5.ghg_quantity_sum == null) {
									operation_result_tAggregateRow_5.ghg_quantity_sum = new BigDecimal(
											0);
								}
								operation_result_tAggregateRow_5.ghg_quantity_sum = operation_result_tAggregateRow_5.ghg_quantity_sum
										.add(new BigDecimal(String
												.valueOf(row4.ghg_quantity)));

								tos_count_tAggregateRow_5_AGGOUT++;

								/**
								 * [tAggregateRow_5_AGGOUT main ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tAggregateRow_5_AGGIN - inputs:(OnRowsEnd)
				// outputs:(row8,row8) | target node:tAdvancedHash_row8 -
				// inputs:(row8) outputs:()
				// linked node: tMap_1 - inputs:(row7,row8,row9,row10)
				// outputs:(FLIGHT_Out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE",
						values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row8.reporting_year = aggregated_row_tAggregateRow_5.reporting_year;

					row8.state = aggregated_row_tAggregateRow_5.state;
					row8.ghg_quantity = aggregated_row_tAggregateRow_5.ghg_quantity_sum;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tAdvancedHash_row8 main ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					row8Struct row8_HashRow = new row8Struct();

					row8_HashRow.reporting_year = row8.reporting_year;

					row8_HashRow.state = row8.state;

					row8_HashRow.ghg_quantity = row8.ghg_quantity;

					tHash_Lookup_row8.put(row8_HashRow);

					tos_count_tAdvancedHash_row8++;

					/**
					 * [tAdvancedHash_row8 main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.state == null) ? 0 : this.state.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.state == null) {
				if (other.state != null)
					return false;

			} else if (!this.state.equals(other.state))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.reporting_year = this.reporting_year;
			other.state = this.state;
			other.ghg_quantity = this.ghg_quantity;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.state = this.state;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.reporting_year = readInteger(dis, ois);

				this.ghg_quantity = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.reporting_year, dos, oos);

				oos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.state, other.state);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.state = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public Integer ghgrp_id;

		public Integer getGhgrp_id() {
			return this.ghgrp_id;
		}

		public String reported_address;

		public String getReported_address() {
			return this.reported_address;
		}

		public Float latitude;

		public Float getLatitude() {
			return this.latitude;
		}

		public Float longitude;

		public Float getLongitude() {
			return this.longitude;
		}

		public String city_name;

		public String getCity_name() {
			return this.city_name;
		}

		public String county_name;

		public String getCounty_name() {
			return this.county_name;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String parent_companies;

		public String getParent_companies() {
			return this.parent_companies;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		public String sub_parts;

		public String getSub_parts() {
			return this.sub_parts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.facility_name = readString(dis);

					this.ghgrp_id = readInteger(dis);

					this.reported_address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readFloat();
					}

					this.city_name = readString(dis);

					this.county_name = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.parent_companies = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

					this.sub_parts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.facility_name, dos);

				// Integer

				writeInteger(this.ghgrp_id, dos);

				// String

				writeString(this.reported_address, dos);

				// Float

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.latitude);
				}

				// Float

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.longitude);
				}

				// String

				writeString(this.city_name, dos);

				// String

				writeString(this.county_name, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.parent_companies, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

				// String

				writeString(this.sub_parts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",facility_name=" + facility_name);
			sb.append(",ghgrp_id=" + String.valueOf(ghgrp_id));
			sb.append(",reported_address=" + reported_address);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",city_name=" + city_name);
			sb.append(",county_name=" + county_name);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",parent_companies=" + parent_companies);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append(",sub_parts=" + sub_parts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				int tos_count_tAggregateRow_3_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer reporting_year;
					String state;
					BigDecimal ghg_quantity_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.reporting_year == null) ? 0
											: this.reporting_year.hashCode());

							result = prime
									* result
									+ ((this.state == null) ? 0 : this.state
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.reporting_year == null) {
							if (other.reporting_year != null)
								return false;
						} else if (!this.reporting_year
								.equals(other.reporting_year))
							return false;

						if (this.state == null) {
							if (other.state != null)
								return false;
						} else if (!this.state.equals(other.state))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_3 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_3.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_3.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_3 = context.recv_dir
						+ "/FLIGHT 2013 Power Plant Extract.xls";
				final jxl.Workbook workbook_tFileInputExcel_3;

				java.io.InputStream toClose_tFileInputExcel_3 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_3 = null;
				try {
					if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_3 = (java.io.InputStream) source_tFileInputExcel_3;
						buffIStreamtFileInputExcel_3 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_3);
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_3,
								workbookSettings_tFileInputExcel_3);
					} else if (source_tFileInputExcel_3 instanceof String) {
						toClose_tFileInputExcel_3 = new java.io.FileInputStream(
								source_tFileInputExcel_3.toString());
						buffIStreamtFileInputExcel_3 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_3);
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_3,
								workbookSettings_tFileInputExcel_3);
					} else {
						workbook_tFileInputExcel_3 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_3 != null) {
							buffIStreamtFileInputExcel_3.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_3
							.addAll(regexUtil_tFileInputExcel_3.getSheets(
									workbook_tFileInputExcel_3,
									"FLIGHT Facilities and GHG Quant", false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_3
									.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheet_FilterNullList_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 6;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += sheet_tFileInputExcel_3
									.getRows();
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_3 = null;
						jxl.Sheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_3 = df_tFileInputExcel_3
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1
									&& nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3
									+ currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRows();
							}
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3
												- rowCount_tFileInputExcel_3);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET",
									sheet_tFileInputExcel_3.getName());
							row5 = null;
							int tempRowLength_tFileInputExcel_3 = 13;

							int columnIndex_tFileInputExcel_3 = 0;

							//
							// end%>

							String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
							int actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > row_tFileInputExcel_3.length ? row_tFileInputExcel_3.length
									: end_column_tFileInputExcel_3;
							for (int i = 0; i < tempRowLength_tFileInputExcel_3; i++) {

								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {

									jxl.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3[i
											+ start_column_tFileInputExcel_3];
									temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
											.getContents();

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_3 = false;
							row5 = new row5Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								columnIndex_tFileInputExcel_3 = 0;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "reporting_year";
									row5.reporting_year = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]);
								} else {
									row5.reporting_year = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 1;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "facility_name";
									row5.facility_name = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.facility_name = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 2;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "ghgrp_id";
									row5.ghgrp_id = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]);
								} else {
									row5.ghgrp_id = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 3;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "reported_address";
									row5.reported_address = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.reported_address = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 4;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "latitude";
									row5.latitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]);
								} else {
									row5.latitude = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 5;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "longitude";
									row5.longitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]);
								} else {
									row5.longitude = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 6;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "city_name";
									row5.city_name = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.city_name = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 7;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "county_name";
									row5.county_name = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.county_name = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 8;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "state";
									row5.state = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.state = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 9;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "zip";
									row5.zip = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.zip = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 10;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "parent_companies";
									row5.parent_companies = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.parent_companies = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 11;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "ghg_quantity";
									row5.ghg_quantity = ParserUtils
											.parseTo_BigDecimal(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]);
								} else {
									row5.ghg_quantity = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 12;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "sub_parts";
									row5.sub_parts = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row5.sub_parts = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row5 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tAggregateRow_3_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_3";

								currentComponent = "tAggregateRow_3_AGGOUT";

								operation_finder_tAggregateRow_3.reporting_year = row5.reporting_year;
								operation_finder_tAggregateRow_3.state = row5.state;

								operation_finder_tAggregateRow_3.hashCodeDirty = true;

								operation_result_tAggregateRow_3 = hash_tAggregateRow_3
										.get(operation_finder_tAggregateRow_3);

								if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

									operation_result_tAggregateRow_3.reporting_year = operation_finder_tAggregateRow_3.reporting_year;
									operation_result_tAggregateRow_3.state = operation_finder_tAggregateRow_3.state;

									hash_tAggregateRow_3.put(
											operation_result_tAggregateRow_3,
											operation_result_tAggregateRow_3);

								} // G_OutMain_AggR_001

								if (operation_result_tAggregateRow_3.ghg_quantity_sum == null) {
									operation_result_tAggregateRow_3.ghg_quantity_sum = new BigDecimal(
											0);
								}
								operation_result_tAggregateRow_3.ghg_quantity_sum = operation_result_tAggregateRow_3.ghg_quantity_sum
										.add(new BigDecimal(String
												.valueOf(row5.ghg_quantity)));

								tos_count_tAggregateRow_3_AGGOUT++;

								/**
								 * [tAggregateRow_3_AGGOUT main ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE",
								nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.close();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tAggregateRow_3_AGGIN - inputs:(OnRowsEnd)
				// outputs:(row9,row9) | target node:tAdvancedHash_row9 -
				// inputs:(row9) outputs:()
				// linked node: tMap_1 - inputs:(row7,row8,row9,row10)
				// outputs:(FLIGHT_Out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE",
						values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row9.reporting_year = aggregated_row_tAggregateRow_3.reporting_year;

					row9.state = aggregated_row_tAggregateRow_3.state;
					row9.ghg_quantity = aggregated_row_tAggregateRow_3.ghg_quantity_sum;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tAdvancedHash_row9 main ] start
					 */

					currentComponent = "tAdvancedHash_row9";

					row9Struct row9_HashRow = new row9Struct();

					row9_HashRow.reporting_year = row9.reporting_year;

					row9_HashRow.state = row9.state;

					row9_HashRow.ghg_quantity = row9.ghg_quantity;

					tHash_Lookup_row9.put(row9_HashRow);

					tos_count_tAdvancedHash_row9++;

					/**
					 * [tAdvancedHash_row9 main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.state == null) ? 0 : this.state.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.state == null) {
				if (other.state != null)
					return false;

			} else if (!this.state.equals(other.state))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.reporting_year = this.reporting_year;
			other.state = this.state;
			other.ghg_quantity = this.ghg_quantity;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.state = this.state;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.reporting_year = readInteger(dis, ois);

				this.ghg_quantity = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.reporting_year, dos, oos);

				oos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.state, other.state);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.state = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.state, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",state=" + state);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public Integer reporting_year;

		public Integer getReporting_year() {
			return this.reporting_year;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public Integer ghgrp_id;

		public Integer getGhgrp_id() {
			return this.ghgrp_id;
		}

		public String reported_address;

		public String getReported_address() {
			return this.reported_address;
		}

		public Float latitude;

		public Float getLatitude() {
			return this.latitude;
		}

		public Float longitude;

		public Float getLongitude() {
			return this.longitude;
		}

		public String city_name;

		public String getCity_name() {
			return this.city_name;
		}

		public String county_name;

		public String getCounty_name() {
			return this.county_name;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String parent_companies;

		public String getParent_companies() {
			return this.parent_companies;
		}

		public BigDecimal ghg_quantity;

		public BigDecimal getGhg_quantity() {
			return this.ghg_quantity;
		}

		public String sub_parts;

		public String getSub_parts() {
			return this.sub_parts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.reporting_year = readInteger(dis);

					this.facility_name = readString(dis);

					this.ghgrp_id = readInteger(dis);

					this.reported_address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readFloat();
					}

					this.city_name = readString(dis);

					this.county_name = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.parent_companies = readString(dis);

					this.ghg_quantity = (BigDecimal) dis.readObject();

					this.sub_parts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.reporting_year, dos);

				// String

				writeString(this.facility_name, dos);

				// Integer

				writeInteger(this.ghgrp_id, dos);

				// String

				writeString(this.reported_address, dos);

				// Float

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.latitude);
				}

				// Float

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.longitude);
				}

				// String

				writeString(this.city_name, dos);

				// String

				writeString(this.county_name, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.parent_companies, dos);

				// BigDecimal

				dos.writeObject(this.ghg_quantity);

				// String

				writeString(this.sub_parts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("reporting_year=" + String.valueOf(reporting_year));
			sb.append(",facility_name=" + facility_name);
			sb.append(",ghgrp_id=" + String.valueOf(ghgrp_id));
			sb.append(",reported_address=" + reported_address);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",city_name=" + city_name);
			sb.append(",county_name=" + county_name);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",parent_companies=" + parent_companies);
			sb.append(",ghg_quantity=" + String.valueOf(ghg_quantity));
			sb.append(",sub_parts=" + sub_parts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				int tos_count_tAggregateRow_4_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer reporting_year;
					String state;
					BigDecimal ghg_quantity_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.reporting_year == null) ? 0
											: this.reporting_year.hashCode());

							result = prime
									* result
									+ ((this.state == null) ? 0 : this.state
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.reporting_year == null) {
							if (other.reporting_year != null)
								return false;
						} else if (!this.reporting_year
								.equals(other.reporting_year))
							return false;

						if (this.state == null) {
							if (other.state != null)
								return false;
						} else if (!this.state.equals(other.state))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputExcel_4 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_4", false);
				start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_4";

				int tos_count_tFileInputExcel_4 = 0;

				class RegexUtil_tFileInputExcel_4 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_4 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_4.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_4.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_4 = context.recv_dir
						+ "/FLIGHT 2014 Power Plant Extract.xls";
				final jxl.Workbook workbook_tFileInputExcel_4;

				java.io.InputStream toClose_tFileInputExcel_4 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_4 = null;
				try {
					if (source_tFileInputExcel_4 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_4 = (java.io.InputStream) source_tFileInputExcel_4;
						buffIStreamtFileInputExcel_4 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_4);
						workbook_tFileInputExcel_4 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_4,
								workbookSettings_tFileInputExcel_4);
					} else if (source_tFileInputExcel_4 instanceof String) {
						toClose_tFileInputExcel_4 = new java.io.FileInputStream(
								source_tFileInputExcel_4.toString());
						buffIStreamtFileInputExcel_4 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_4);
						workbook_tFileInputExcel_4 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_4,
								workbookSettings_tFileInputExcel_4);
					} else {
						workbook_tFileInputExcel_4 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_4 != null) {
							buffIStreamtFileInputExcel_4.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_4 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_4
							.addAll(regexUtil_tFileInputExcel_4.getSheets(
									workbook_tFileInputExcel_4,
									"FLIGHT Facilities and GHG Quant", false));
					if (sheetList_tFileInputExcel_4.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_4 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
						if (sheet_FilterNull_tFileInputExcel_4.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_4
									.add(sheet_FilterNull_tFileInputExcel_4);
						}
					}
					sheetList_tFileInputExcel_4 = sheet_FilterNullList_tFileInputExcel_4;
					if (sheetList_tFileInputExcel_4.size() > 0) {
						int nb_line_tFileInputExcel_4 = 0;

						int begin_line_tFileInputExcel_4 = 6;

						int footer_input_tFileInputExcel_4 = 0;

						int end_line_tFileInputExcel_4 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
							end_line_tFileInputExcel_4 += sheet_tFileInputExcel_4
									.getRows();
						}
						end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
						int limit_tFileInputExcel_4 = -1;
						int start_column_tFileInputExcel_4 = 1 - 1;
						int end_column_tFileInputExcel_4 = sheetList_tFileInputExcel_4
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_4 = null;
						jxl.Sheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4
								.get(0);
						int rowCount_tFileInputExcel_4 = 0;
						int sheetIndex_tFileInputExcel_4 = 0;
						int currentRows_tFileInputExcel_4 = sheetList_tFileInputExcel_4
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_4 = df_tFileInputExcel_4
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++) {

							int emptyColumnCount_tFileInputExcel_4 = 0;

							if (limit_tFileInputExcel_4 != -1
									&& nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
								break;
							}

							while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4
									+ currentRows_tFileInputExcel_4) {
								rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
								sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4
										.get(++sheetIndex_tFileInputExcel_4);
								currentRows_tFileInputExcel_4 = sheet_tFileInputExcel_4
										.getRows();
							}
							if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
								row_tFileInputExcel_4 = sheet_tFileInputExcel_4
										.getRow(i_tFileInputExcel_4
												- rowCount_tFileInputExcel_4);
							}
							globalMap.put("tFileInputExcel_4_CURRENT_SHEET",
									sheet_tFileInputExcel_4.getName());
							row6 = null;
							int tempRowLength_tFileInputExcel_4 = 13;

							int columnIndex_tFileInputExcel_4 = 0;

							//
							// end%>

							String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
							int actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 > row_tFileInputExcel_4.length ? row_tFileInputExcel_4.length
									: end_column_tFileInputExcel_4;
							for (int i = 0; i < tempRowLength_tFileInputExcel_4; i++) {

								if (i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4) {

									jxl.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4[i
											+ start_column_tFileInputExcel_4];
									temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4
											.getContents();

								} else {
									temp_row_tFileInputExcel_4[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_4 = false;
							row6 = new row6Struct();
							int curColNum_tFileInputExcel_4 = -1;
							String curColName_tFileInputExcel_4 = "";
							try {
								columnIndex_tFileInputExcel_4 = 0;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "reporting_year";
									row6.reporting_year = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]);
								} else {
									row6.reporting_year = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 1;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "facility_name";
									row6.facility_name = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.facility_name = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 2;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "ghgrp_id";
									row6.ghgrp_id = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]);
								} else {
									row6.ghgrp_id = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 3;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "reported_address";
									row6.reported_address = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.reported_address = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 4;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "latitude";
									row6.latitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]);
								} else {
									row6.latitude = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 5;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "longitude";
									row6.longitude = ParserUtils
											.parseTo_Float(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]);
								} else {
									row6.longitude = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 6;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "city_name";
									row6.city_name = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.city_name = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 7;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "county_name";
									row6.county_name = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.county_name = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 8;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "state";
									row6.state = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.state = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 9;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "zip";
									row6.zip = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.zip = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 10;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "parent_companies";
									row6.parent_companies = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.parent_companies = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 11;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "ghg_quantity";
									row6.ghg_quantity = ParserUtils
											.parseTo_BigDecimal(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]);
								} else {
									row6.ghg_quantity = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 12;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4
											+ 1;
									curColName_tFileInputExcel_4 = "sub_parts";
									row6.sub_parts = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row6.sub_parts = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								nb_line_tFileInputExcel_4++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_4 = true;
								System.err.println(e.getMessage());
								row6 = null;
							}

							/**
							 * [tFileInputExcel_4 begin ] stop
							 */

							/**
							 * [tFileInputExcel_4 main ] start
							 */

							currentComponent = "tFileInputExcel_4";

							tos_count_tFileInputExcel_4++;

							/**
							 * [tFileInputExcel_4 main ] stop
							 */
							// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tAggregateRow_4_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								operation_finder_tAggregateRow_4.reporting_year = row6.reporting_year;
								operation_finder_tAggregateRow_4.state = row6.state;

								operation_finder_tAggregateRow_4.hashCodeDirty = true;

								operation_result_tAggregateRow_4 = hash_tAggregateRow_4
										.get(operation_finder_tAggregateRow_4);

								if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

									operation_result_tAggregateRow_4.reporting_year = operation_finder_tAggregateRow_4.reporting_year;
									operation_result_tAggregateRow_4.state = operation_finder_tAggregateRow_4.state;

									hash_tAggregateRow_4.put(
											operation_result_tAggregateRow_4,
											operation_result_tAggregateRow_4);

								} // G_OutMain_AggR_001

								if (operation_result_tAggregateRow_4.ghg_quantity_sum == null) {
									operation_result_tAggregateRow_4.ghg_quantity_sum = new BigDecimal(
											0);
								}
								operation_result_tAggregateRow_4.ghg_quantity_sum = operation_result_tAggregateRow_4.ghg_quantity_sum
										.add(new BigDecimal(String
												.valueOf(row6.ghg_quantity)));

								tos_count_tAggregateRow_4_AGGOUT++;

								/**
								 * [tAggregateRow_4_AGGOUT main ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFileInputExcel_4 end ] start
							 */

							currentComponent = "tFileInputExcel_4";

						}

						globalMap.put("tFileInputExcel_4_NB_LINE",
								nb_line_tFileInputExcel_4);

					}

				} finally {

					if (!(source_tFileInputExcel_4 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_4.close();
					}

				}

				ok_Hash.put("tFileInputExcel_4", true);
				end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_4 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tAggregateRow_4_AGGIN - inputs:(OnRowsEnd)
				// outputs:(row10,row10) | target node:tAdvancedHash_row10 -
				// inputs:(row10) outputs:()
				// linked node: tMap_1 - inputs:(row7,row8,row9,row10)
				// outputs:(FLIGHT_Out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE",
						values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row10.reporting_year = aggregated_row_tAggregateRow_4.reporting_year;

					row10.state = aggregated_row_tAggregateRow_4.state;
					row10.ghg_quantity = aggregated_row_tAggregateRow_4.ghg_quantity_sum;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tAdvancedHash_row10 main ] start
					 */

					currentComponent = "tAdvancedHash_row10";

					row10Struct row10_HashRow = new row10Struct();

					row10_HashRow.reporting_year = row10.reporting_year;

					row10_HashRow.state = row10.state;

					row10_HashRow.ghg_quantity = row10.ghg_quantity;

					tHash_Lookup_row10.put(row10_HashRow);

					tos_count_tAdvancedHash_row10++;

					/**
					 * [tAdvancedHash_row10 main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			try {

				/**
				 * [tFileInputExcel_4 finally ] start
				 */

				currentComponent = "tFileInputExcel_4";

				/**
				 * [tFileInputExcel_4 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String state;

		public String getState() {
			return this.state;
		}

		public String state_name;

		public String getState_name() {
			return this.state_name;
		}

		public BigDecimal ghg_goal_2022;

		public BigDecimal getGhg_goal_2022() {
			return this.ghg_goal_2022;
		}

		public BigDecimal ghg_goal_2023;

		public BigDecimal getGhg_goal_2023() {
			return this.ghg_goal_2023;
		}

		public BigDecimal ghg_goal_2024;

		public BigDecimal getGhg_goal_2024() {
			return this.ghg_goal_2024;
		}

		public BigDecimal ghg_goal_2025;

		public BigDecimal getGhg_goal_2025() {
			return this.ghg_goal_2025;
		}

		public BigDecimal ghg_goal_2026;

		public BigDecimal getGhg_goal_2026() {
			return this.ghg_goal_2026;
		}

		public BigDecimal ghg_goal_2027;

		public BigDecimal getGhg_goal_2027() {
			return this.ghg_goal_2027;
		}

		public BigDecimal ghg_goal_2028;

		public BigDecimal getGhg_goal_2028() {
			return this.ghg_goal_2028;
		}

		public BigDecimal ghg_goal_2029;

		public BigDecimal getGhg_goal_2029() {
			return this.ghg_goal_2029;
		}

		public BigDecimal ghg_goal_2030;

		public BigDecimal getGhg_goal_2030() {
			return this.ghg_goal_2030;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.state == null) ? 0 : this.state.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.state == null) {
				if (other.state != null)
					return false;

			} else if (!this.state.equals(other.state))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.state = this.state;
			other.state_name = this.state_name;
			other.ghg_goal_2022 = this.ghg_goal_2022;
			other.ghg_goal_2023 = this.ghg_goal_2023;
			other.ghg_goal_2024 = this.ghg_goal_2024;
			other.ghg_goal_2025 = this.ghg_goal_2025;
			other.ghg_goal_2026 = this.ghg_goal_2026;
			other.ghg_goal_2027 = this.ghg_goal_2027;
			other.ghg_goal_2028 = this.ghg_goal_2028;
			other.ghg_goal_2029 = this.ghg_goal_2029;
			other.ghg_goal_2030 = this.ghg_goal_2030;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.state = this.state;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.state_name = readString(dis, ois);

				this.ghg_goal_2022 = (BigDecimal) ois.readObject();

				this.ghg_goal_2023 = (BigDecimal) ois.readObject();

				this.ghg_goal_2024 = (BigDecimal) ois.readObject();

				this.ghg_goal_2025 = (BigDecimal) ois.readObject();

				this.ghg_goal_2026 = (BigDecimal) ois.readObject();

				this.ghg_goal_2027 = (BigDecimal) ois.readObject();

				this.ghg_goal_2028 = (BigDecimal) ois.readObject();

				this.ghg_goal_2029 = (BigDecimal) ois.readObject();

				this.ghg_goal_2030 = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.state_name, dos, oos);

				oos.writeObject(this.ghg_goal_2022);

				oos.writeObject(this.ghg_goal_2023);

				oos.writeObject(this.ghg_goal_2024);

				oos.writeObject(this.ghg_goal_2025);

				oos.writeObject(this.ghg_goal_2026);

				oos.writeObject(this.ghg_goal_2027);

				oos.writeObject(this.ghg_goal_2028);

				oos.writeObject(this.ghg_goal_2029);

				oos.writeObject(this.ghg_goal_2030);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",state_name=" + state_name);
			sb.append(",ghg_goal_2022=" + String.valueOf(ghg_goal_2022));
			sb.append(",ghg_goal_2023=" + String.valueOf(ghg_goal_2023));
			sb.append(",ghg_goal_2024=" + String.valueOf(ghg_goal_2024));
			sb.append(",ghg_goal_2025=" + String.valueOf(ghg_goal_2025));
			sb.append(",ghg_goal_2026=" + String.valueOf(ghg_goal_2026));
			sb.append(",ghg_goal_2027=" + String.valueOf(ghg_goal_2027));
			sb.append(",ghg_goal_2028=" + String.valueOf(ghg_goal_2028));
			sb.append(",ghg_goal_2029=" + String.valueOf(ghg_goal_2029));
			sb.append(",ghg_goal_2030=" + String.valueOf(ghg_goal_2030));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.state, other.state);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputExcel_5 -
				// inputs:(after_tFileInputExcel_2) outputs:(row2,row2) | target
				// node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_2 - inputs:(FLIGHT_Out,row2)
				// outputs:(final_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_5", false);
				start_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_5";

				int tos_count_tFileInputExcel_5 = 0;

				class RegexUtil_tFileInputExcel_5 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_5 regexUtil_tFileInputExcel_5 = new RegexUtil_tFileInputExcel_5();

				Object source_tFileInputExcel_5 = context.recv_dir
						+ "/Data for EPA EDS.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_5 = null;

				if (source_tFileInputExcel_5 instanceof String) {
					workbook_tFileInputExcel_5 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_5);
				} else if (source_tFileInputExcel_5 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_5 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_5);
				} else {
					workbook_tFileInputExcel_5 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_5
							.addAll(regexUtil_tFileInputExcel_5.getSheets(
									workbook_tFileInputExcel_5,
									"Data for EPA EDS", false));
					if (sheetList_tFileInputExcel_5.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_5 : sheetList_tFileInputExcel_5) {
						if (sheet_FilterNull_tFileInputExcel_5 != null
								&& sheetList_FilterNull_tFileInputExcel_5
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_5
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_5
									.add(sheet_FilterNull_tFileInputExcel_5);
						}
					}
					sheetList_tFileInputExcel_5 = sheetList_FilterNull_tFileInputExcel_5;
					if (sheetList_tFileInputExcel_5.size() > 0) {
						int nb_line_tFileInputExcel_5 = 0;

						int begin_line_tFileInputExcel_5 = 2;

						int footer_input_tFileInputExcel_5 = 0;

						int end_line_tFileInputExcel_5 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5 : sheetList_tFileInputExcel_5) {
							end_line_tFileInputExcel_5 += (sheet_tFileInputExcel_5
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_5 -= footer_input_tFileInputExcel_5;
						int limit_tFileInputExcel_5 = -1;
						int start_column_tFileInputExcel_5 = 12 - 1;
						int end_column_tFileInputExcel_5 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_5 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5
								.get(0);
						int rowCount_tFileInputExcel_5 = 0;
						int sheetIndex_tFileInputExcel_5 = 0;
						int currentRows_tFileInputExcel_5 = (sheetList_tFileInputExcel_5
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_5 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_5 = df_tFileInputExcel_5
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_5 = begin_line_tFileInputExcel_5; i_tFileInputExcel_5 < end_line_tFileInputExcel_5; i_tFileInputExcel_5++) {

							int emptyColumnCount_tFileInputExcel_5 = 0;

							if (limit_tFileInputExcel_5 != -1
									&& nb_line_tFileInputExcel_5 >= limit_tFileInputExcel_5) {
								break;
							}

							while (i_tFileInputExcel_5 >= rowCount_tFileInputExcel_5
									+ currentRows_tFileInputExcel_5) {
								rowCount_tFileInputExcel_5 += currentRows_tFileInputExcel_5;
								sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5
										.get(++sheetIndex_tFileInputExcel_5);
								currentRows_tFileInputExcel_5 = (sheet_tFileInputExcel_5
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_5_CURRENT_SHEET",
									sheet_tFileInputExcel_5.getSheetName());
							if (rowCount_tFileInputExcel_5 <= i_tFileInputExcel_5) {
								row_tFileInputExcel_5 = sheet_tFileInputExcel_5
										.getRow(i_tFileInputExcel_5
												- rowCount_tFileInputExcel_5);
							}
							row2 = null;
							row2 = null;
							int tempRowLength_tFileInputExcel_5 = 11;

							int columnIndex_tFileInputExcel_5 = 0;

							String[] temp_row_tFileInputExcel_5 = new String[tempRowLength_tFileInputExcel_5];
							int excel_end_column_tFileInputExcel_5;
							if (row_tFileInputExcel_5 == null) {
								excel_end_column_tFileInputExcel_5 = 0;
							} else {
								excel_end_column_tFileInputExcel_5 = row_tFileInputExcel_5
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_5;
							if (end_column_tFileInputExcel_5 == -1) {
								actual_end_column_tFileInputExcel_5 = excel_end_column_tFileInputExcel_5;
							} else {
								actual_end_column_tFileInputExcel_5 = end_column_tFileInputExcel_5 > excel_end_column_tFileInputExcel_5 ? excel_end_column_tFileInputExcel_5
										: end_column_tFileInputExcel_5;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_5 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_5; i++) {
								if (i + start_column_tFileInputExcel_5 < actual_end_column_tFileInputExcel_5) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_5 = row_tFileInputExcel_5
											.getCell(i
													+ start_column_tFileInputExcel_5);
									if (cell_tFileInputExcel_5 != null) {
										switch (cell_tFileInputExcel_5
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_5)) {
												temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_5[i] = df_tFileInputExcel_5
														.format(cell_tFileInputExcel_5
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_5[i] = String
													.valueOf(cell_tFileInputExcel_5
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_5
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_5)) {
													temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_5 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_5
																	.getNumericCellValue());
													temp_row_tFileInputExcel_5[i] = ne_tFileInputExcel_5
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_5[i] = String
														.valueOf(cell_tFileInputExcel_5
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_5[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_5[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_5[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_5[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_5 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_5 = -1;
							String curColName_tFileInputExcel_5 = "";
							try {
								columnIndex_tFileInputExcel_5 = 0;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "state";

									row2.state = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row2.state = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 1;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "state_name";

									row2.state_name = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row2.state_name = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 2;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2022";

									row2.ghg_goal_2022 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2022 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 3;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2023";

									row2.ghg_goal_2023 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2023 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 4;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2024";

									row2.ghg_goal_2024 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2024 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 5;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2025";

									row2.ghg_goal_2025 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2025 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 6;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2026";

									row2.ghg_goal_2026 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2026 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 7;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2027";

									row2.ghg_goal_2027 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2027 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 8;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2028";

									row2.ghg_goal_2028 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2028 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 9;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2029";

									row2.ghg_goal_2029 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2029 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 10;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5
											+ 1;
									curColName_tFileInputExcel_5 = "ghg_goal_2030";

									row2.ghg_goal_2030 = ParserUtils
											.parseTo_BigDecimal(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5],
															null,
															'.' == decimalChar_tFileInputExcel_5 ? null
																	: decimalChar_tFileInputExcel_5));
								} else {
									row2.ghg_goal_2030 = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								nb_line_tFileInputExcel_5++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_5 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_5 begin ] stop
							 */

							/**
							 * [tFileInputExcel_5 main ] start
							 */

							currentComponent = "tFileInputExcel_5";

							tos_count_tFileInputExcel_5++;

							/**
							 * [tFileInputExcel_5 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tAdvancedHash_row2 main ] start
								 */

								currentComponent = "tAdvancedHash_row2";

								row2Struct row2_HashRow = new row2Struct();

								row2_HashRow.state = row2.state;

								row2_HashRow.state_name = row2.state_name;

								row2_HashRow.ghg_goal_2022 = row2.ghg_goal_2022;

								row2_HashRow.ghg_goal_2023 = row2.ghg_goal_2023;

								row2_HashRow.ghg_goal_2024 = row2.ghg_goal_2024;

								row2_HashRow.ghg_goal_2025 = row2.ghg_goal_2025;

								row2_HashRow.ghg_goal_2026 = row2.ghg_goal_2026;

								row2_HashRow.ghg_goal_2027 = row2.ghg_goal_2027;

								row2_HashRow.ghg_goal_2028 = row2.ghg_goal_2028;

								row2_HashRow.ghg_goal_2029 = row2.ghg_goal_2029;

								row2_HashRow.ghg_goal_2030 = row2.ghg_goal_2030;

								tHash_Lookup_row2.put(row2_HashRow);

								tos_count_tAdvancedHash_row2++;

								/**
								 * [tAdvancedHash_row2 main ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_5 end ] start
							 */

							currentComponent = "tFileInputExcel_5";

						}

						globalMap.put("tFileInputExcel_5_NB_LINE",
								nb_line_tFileInputExcel_5);

					}

				} finally {

					if (!(source_tFileInputExcel_5 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_5.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_5", true);
				end_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_5 finally ] start
				 */

				currentComponent = "tFileInputExcel_5";

				/**
				 * [tFileInputExcel_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_5_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_EPA_EDS_EPA_Prototype = new byte[0];
		static byte[] commonByteArray_EPA_EDS_EPA_Prototype = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		public String state_fullname;

		public String getState_fullname() {
			return this.state_fullname;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EPA_EDS_EPA_Prototype.length) {
					if (length < 1024
							&& commonByteArray_EPA_EDS_EPA_Prototype.length == 0) {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[1024];
					} else {
						commonByteArray_EPA_EDS_EPA_Prototype = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EPA_EDS_EPA_Prototype, 0, length);
				strReturn = new String(commonByteArray_EPA_EDS_EPA_Prototype,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EPA_EDS_EPA_Prototype) {

				try {

					int length = 0;

					this.state = readString(dis);

					this.state_fullname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

				// String

				writeString(this.state_fullname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append(",state_fullname=" + state_fullname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWriteJSONField_1_InProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.wrk_dir + "/epa_eds.json")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tWriteJSONField_1_In begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_In", false);
				start_Hash.put("tWriteJSONField_1_In",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				int tos_count_tWriteJSONField_1_In = 0;

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer();
				xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
				xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
				xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(true);

				java.util.Queue<row3Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row3Struct>) globalMap
						.get("queue_tWriteJSONField_1_In");

				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"
						+ (queue_tWriteJSONField_1_In == null ? ""
								: queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;

				while (!globalMap
						.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In)
						|| !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {

						/**
						 * [tWriteJSONField_1_In begin ] stop
						 */

						/**
						 * [tWriteJSONField_1_In main ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						row3Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In
								.poll();
						str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.state;
						// Convert XML to JSON
						net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In
								.read(str_tWriteJSONField_1_In);
						row3.state = json_tWriteJSONField_1_In.toString();

						nb_line_tWriteJSONField_1_In++;

						tos_count_tWriteJSONField_1_In++;

						/**
						 * [tWriteJSONField_1_In main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row3.state != null) {
							sb_tFileOutputDelimited_1.append(row3.state);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row3.state_fullname != null) {
							sb_tFileOutputDelimited_1
									.append(row3.state_fullname);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tWriteJSONField_1_In end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
						+ (queue_tWriteJSONField_1_In == null ? ""
								: queue_tWriteJSONField_1_In.hashCode());
				if (globalMap
						.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)) {
					if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
						globalMap
								.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In,
										null);// syn
					}
					globalMap
							.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
					return;
				}
				globalMap.remove("queue_tWriteJSONField_1_In");

				if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap
							.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,
									null);// syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);

				globalMap.put("tWriteJSONField_1_NB_LINE",
						nb_line_tWriteJSONField_1_In);

				ok_Hash.put("tWriteJSONField_1_In", true);
				end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());

				/**
				 * [tWriteJSONField_1_In end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWriteJSONField_1_In finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				/**
				 * [tWriteJSONField_1_In finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final EPA_Prototype EPA_PrototypeClass = new EPA_Prototype();

		int exitCode = EPA_PrototypeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = EPA_Prototype.class
					.getClassLoader().getResourceAsStream(
							"epa_eds/epa_prototype_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.src_dir = (String) context.getProperty("src_dir");
			context.wrk_dir = (String) context.getProperty("wrk_dir");
			context.recv_dir = (String) context.getProperty("recv_dir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("src_dir")) {
				context.src_dir = (String) parentContextMap.get("src_dir");
			}
			if (parentContextMap.containsKey("wrk_dir")) {
				context.wrk_dir = (String) parentContextMap.get("wrk_dir");
			}
			if (parentContextMap.containsKey("recv_dir")) {
				context.recv_dir = (String) parentContextMap.get("recv_dir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_2) {
			globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : EPA_Prototype");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 346479 characters generated by Talend Open Studio for Data Integration on the
 * December 22, 2015 7:56:07 AM EST
 ************************************************************************************************/
